test0 = locpol(y ~ YearBuilt, data = df_f, bw=13,kernel=EpaK,deg=0,
xeval=seq(1970, 2010, by=1))
ggplot(df_f, aes(x=YearBuilt, y=y, colour="Observed"))+
geom_point() +
scale_y_log10() +
theme_bw()+
geom_line(data = preds, aes(x=YearBuilt, y=yhat, colour="Prediction, deg=2, bw=13"))+
geom_line(data = preds1, aes(x=YearBuilt, y=yhat, colour="Prediction, deg=1, bw=13")) +
geom_line(data = preds3, aes(x=YearBuilt, y=yhat, colour="Prediction, deg=3, bw=13"))
library(tidyverse)
library(locfit)
set.seed(2022)
######## Introducing the model we want to solve for
N = 1e4
X  = runif(N, -3,3)
proba <- function(x){
transform = c( exp(-1 +   sin(2 + x*4)), exp(-1 +  cos(abs(x))), 1)
return(transform/sum(transform))
}
x_0 = seq(-3,3, by=0.01)
y = sapply(x_0, proba)
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) + theme_bw() +
geom_line(aes( y=y3, colour="y3"))
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1/y3)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2/y3, colour="y2")) + theme_bw()
Y= sapply(X, FUN=function(x){rmultinom(1, 1, proba(x))})
df  = data.frame(x = X,
y1= Y[1,],
y2= Y[2,],
y3= Y[3,])
u = lcvplot(y1 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df, family='binomial')
v =  lcvplot(y2 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(v)
h2 = v$alpha[which.min(v$values)]
fit2 <-  locfit(y2 ~lp(x, h=h2, deg=2), data=df,family='binomial')
pred1 <- predict(fit1, newdata = data.frame(x=x_0) )
pred2 <- predict(fit2, newdata = data.frame(x=x_0) )
pred3 <- 1-(pred1 + pred2)
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,],
y1_hat = pred1,
y2_hat = pred2,
y3_hat = pred3
), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) +
geom_line(aes( y=y3, colour="y3"))+
geom_line(aes(y=y1_hat, colour="y1"), linetype = "dashed") +
geom_line(aes( y=y2_hat, colour="y2"), linetype = "dashed") +
geom_line(aes( y=y3_hat, colour="y3"), linetype = "dashed") + theme_bw()
ORDER = 2 #### Order of the polynomial we want to use
K = 3
grad_step = 0.01
gradient <- function(a, Y, W, X, K, ORDER){
pol <- function(x){sapply(0:ORDER, FUN=function(k){x^k/factorial(k)})}
DD =  matrix(sapply(X-x, pol), ORDER +1, length(W))
lik =  a %*% DD
scores = apply(lik, 2, FUN=function(x){exp(x)/(1+sum(exp(x)))}) ;#print(normalized_lik.shape)
weights =  W *  DD
diff = (Y[1:(K-1),] - scores) %*% t(weights)
gradient = matrix(diff, (K-1) * (ORDER+1), 1, byrow = T)
return(gradient)
}
prediction <- function(a){
theta = c(exp(a[,1]),1.0)
theta = theta/sum(theta)
return(list(theta=theta, pred=which.max(theta)))
}
hessian <- function(a, W, X, K, ORDER){
pol <- function(x){sapply(0:ORDER, FUN=function(k){x^k/factorial(k)})}
DD =  matrix(sapply(X-x, pol), ORDER+1, length(W))
lik =  a %*% DD;
scores = apply(lik, 2, FUN=function(x){exp(x)/(1+sum(exp(x)))}) ;#print(normalized_lik.shape)
scores = matrix(scores, K-1, length(W))
#### Evaluate the function
hessian = matrix(0, (K-1) * (ORDER+1), (K-1) * (ORDER+1))
for(j in 0:(ORDER)){
for(h in 0:(ORDER)){
for(k in 1:(K-1)){
for(l in 1:(K-1)){
if (k!=l){
hessian[j * (K-1) + k, h * (K-1) +l] = sum(W * DD[j+1,] *DD[h+1,] * scores[k,]* scores[l,])
}else{
hessian[j * (K-1) + k , h * (K-1) +k] = -sum(W * DD[j+1,] *DD[h+1,] * (scores[k,] - scores[k,]^2))
}
}
}
}
}
return(hessian)
}
library(pracma)
ORDER=0
res = c()
accuracy = c()
a = matrix( c(log(0.35), log(0.08)), nrow=K-1, ncol=ORDER+1)
flat_a = matrix(a, (K-1) * (ORDER+1), 1, byrow = T)
for (x in x_0){
W =  (abs(X-x) < 0.15) * 1
#W = W/sum(W)
#W = exp(-(X-x)^2/h1)
#W[which(W<0.1)] = 0
## Start with stoch gradient descent
# for (it in 1:100){
#   grad =  gradient(a, Y, W, X, K, ORDER)
#   new_a = flat_a +  grad_step * (grad)
#   a_old = a
#   a = matrix(new_a, nrow=K-1, ncol=ORDER+1)
#   flat_a = matrix(a, (K-1) * (ORDER+1), 1, byrow = T)
#   diff_conv = sum((a_old-a)^2)
#   #print(c(x,diff_conv))
# }
diff_conv = 1000
temp_pred = prediction(a)$theta
while(diff_conv>1e-4){
grad =  gradient(a, Y, W, X, K, ORDER)
Sigma= hessian(a, W,X, K, ORDER)
Hinv = 1/(Sigma[2,2]*Sigma[1,1] - Sigma[1,2]*Sigma[2,1])  * matrix( rbind(cbind(Sigma[2,2], -Sigma[1,2]),
cbind(-Sigma[2,1], Sigma[1,1])), 2,2)
new_a = flat_a -  Hinv %*% (grad)
a_old = a
a = matrix(new_a, nrow=K-1, ncol=ORDER+1)
flat_a = matrix(a, (K-1) * (ORDER+1), 1, byrow = T)
temp_pred_old =temp_pred
temp_pred = prediction(a)$theta
#diff_conv = sum(abs(temp_pred_old-temp_pred))
diff_conv = sum((a_old-a)^2)
print(c(x,diff_conv,temp_pred, proba(x)))
}
pred= prediction(a)
accuracy = rbind(accuracy, c(x, pred$theta, proba(x), pred$pred ))
}
accuracy = data.frame(accuracy)
colnames(accuracy) = c( "x", "pred_y1", "pred_y2","pred_y3", "y1", "y2", "y3", "Yhat")
ggplot(data=accuracy, aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes(y=pred_y1, colour="y1"), linetype = "dashed") +
geom_line(aes( y=y2, colour="y2")) +
geom_line(aes(y=pred_y2, colour="y2"),linetype = "dashed") +
geom_line(aes( y=y3, colour="y3")) +
geom_line(aes(y=pred_y3, colour="y3"),linetype = "dashed") +
theme_bw()
h
W
u = lcvplot(y1 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df, family='binomial')
v =  lcvplot(y2 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(v)
h2
h2 = v$alpha[which.min(v$values)]
fit2 <-  locfit(y2 ~lp(x, h=h2, deg=2), data=df,family='binomial')
pred1 <- predict(fit1, newdata = data.frame(x=x_0) )
pred2 <- predict(fit2, newdata = data.frame(x=x_0) )
pred3 <- 1-(pred1 + pred2)
install.packages("ISLR2")
library(ISLR2)
data("College")
library(tidyverse)
library(locfit)
set.seed(2022)
######## Introducing the model we want to solve for
N = 1e4
X  = runif(N, -3,3)
proba <- function(x){
transform = c( exp(-1 +   sin(2 + x*4)), exp(-1 +  cos(abs(x))), 1)
return(transform/sum(transform))
}
x_0 = seq(-3,3, by=0.01)
y = sapply(x_0, proba)
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) + theme_bw() +
geom_line(aes( y=y3, colour="y3"))
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1/y3)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2/y3, colour="y2")) + theme_bw()
Y= sapply(X, FUN=function(x){rmultinom(1, 1, proba(x))})
df  = data.frame(x = X,
y1= Y[1,],
y2= Y[2,],
y3= Y[3,])
write.table(df, file="~/Downloads/hw5_pb2.txt")
write.table(df, file="~/Downloads/hw2_multiclass.txt")
proba(0.1)
df_test  = data.frame("x"=seq(-3,3,0.01))
sapply(df_test["x"], FUN=function(x){proba(x)[1]})
df_test["x"]
(df_test["x"])
sapply(df_test["x"], FUN=function(x){proba(x)[1]})
sapply(df_test["x"], FUN=function(xx){proba(xx)[1]})
df_test["x"]
sapply(as.numeric(df_test["x"]), FUN=function(xx){proba(xx)[1]})
as.numeric(df_test["x"])
sapply(df_test$x, FUN=function(xx){proba(xx)[1]})
df_test  = data.frame("x"=seq(-3,3,0.01))
df_test["proba1"] =sapply(df_test$x, FUN=function(xx){proba(xx)[1]})
df_test["proba2"] =sapply(df_test$x, FUN=function(xx){proba(xx)[2]})
df_test["proba3"] =sapply(df_test$x, FUN=function(xx){proba(xx)[3]})
write.table(df, file="~/Downloads/hw2_multiclass.txt")
write.table(df_test, file="~/Downloads/hw2_multiclass_test.txt")
transform = c( exp(-3 +   8 * x* (sin(2 + x*4))), 1)
plot(X, exp(-3 +   8 * X* (sin(2 + X*4))) )
X  = runif(N, -1,1)
plot(X, exp(-3 +   8 * X* (sin(2 + X*4))) )
plot(X, exp(-3 +   8 * X* (sin(2 + X))) )
plot(X, exp(-3 +   8 * X* (sin(2 + X/4))) )
plot(X, exp(-3 +   8 * X* (sin(2 + X/16))) )
plot(X, exp(-3 +   8 * X* (sin(X/16))) )
plot(X, exp(-3 +   8 * X* (sin(X/1646))) )
plot(X, exp(-3 +   8 * X* (sin(X/16))) )
plot(X, exp(-3 +   X* (sin(X/16))) )
plot(X, exp(-X* (sin(X/16))) )
plot(X, exp(-X* (sin(X/32))) )
plot(X, exp(- (sin(X/32))) )
plot(X, sin(X) )
plot(X, sin(X/32) )
plot(X, sin(X*32) )
plot(X, sin(X*4) )
plot(X, exp(sin(X*4)) )
plot(X, exp(sin(X*8)) )
plot(X, exp(X*sin(X*8)) )
plot(X, exp(X/2*sin(X*8)) )
plot(X, exp(X/2*sin(X*8)) + x )
plot(X, exp(X/2*sin(X*8)) + x+1 )
plot(X, exp(X/2*sin(X*8)) + x )
plot(X, exp(X/2*sin(X*8)) + x/3 )
plot(X, exp(1/2*sin(X*8)) + abs(x/3) )
plot(X, exp(1/2*sin(X*8) + abs(x/3) ))
plot(X, exp(x/2*sin(X*8) + abs(x/3) ))
plot(X, exp(x/2*sin(X*8) ))
plot(X, exp(1/2*sin(X*8) ))
plot(X, exp(1/2*sin(X*8) /4 ))
plot(X, exp(1/2*sin(X*8) /4 +x/4 ))
plot(X, exp(1/2*sin(X*8) /4 +X/4 ))
plot(X, exp(x/2*sin(X*8) /4 +X/4 ))
plot(X, exp(X/2*sin(X*8) /4 +X/4 ))
plot(X, exp(X/4*sin(X*8) /4 +X/4 ))
plot(X, exp(X/2*sin(X*8) /4 +X/4 ))
plot(X, exp(X/0.9*sin(X*8) /4 +X/4 ))
plot(X, exp(X/0.9*sin(X*8) /4 +X/4 - 1 ))
plot(X, exp(X/0.9*sin(X*8) /4 +X/4 - 0.8 ))
proba_bin <- function(x){
transform = c( exp(x/0.9*sin(x*8) /4 +x/4 - 0.8 ), 1)
return(transform/sum(transform))
}
y = sapply(X, proba_bin)
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) + theme_bw() +
geom_line(aes( y=y3, colour="y3"))
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) + theme_bw()
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1"), size=2) +
theme_bw()
transform = c( exp(x/0.9*sin(x*8) /4 +x/4 ), 1)
proba_bin <- function(x){
transform = c( exp(x/0.9*sin(x*8) /4 +x/4 ), 1)
return(transform/sum(transform))
}
y = sapply(X, proba_bin)
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1"), size=2) +
theme_bw()
rbin(1, proba_bin(x)[1]
)
rbinom(1, proba_bin(x)[1]
)
rbinom(n = 1, s=1, proba_bin(x)[1])
rbinom(n = 1, s=1, proba_bin(x)[1])
proba_bin(x)[1]
rbinom(n = 1, s=1, proba_bin(x)[1])
rbinom(n = 1, s=1, proba_bin(x)[1])
rbinom(n = 1, s=1, proba_bin(x)[1])
df_observed = data.frame(x=X,
y=sapply(X, function(x){rbinom(n = 1, s=1, proba_bin(x)[1])}))
df_observed
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_line(aes(colour="y1"), size=2) +
theme_bw()
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(aes(colour="y"), size=2) +
theme_bw()
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(aes(colour="y"), alpha=0.4) +
theme_bw()
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(, alpha=0.2) +
theme_bw()
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(alpha=0.2) +
geom_jitter()+
theme_bw()
sampled = sapply(X, function(x){rbinom(n = 1, s=1, p=proba_bin(x)[1])})
sampled
df_observed = data.frame(x=X,
y=sampled)
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(alpha=0.2) +
geom_jitter()+
theme_bw()
u = lcvplot(y ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
u = lcvplot(y ~ x,deg=2, data=df_observed, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
plot(u)
h1 = u$alpha[which.min(u$values)]
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test["proba1"] =sapply(df_test$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = data_test )
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
write.table(df_test, file="~/Downloads/hw2_binomial_test.txt")
write_csv(df_test, file="~/Downloads/hw2_binomial_test.csv")
pred1 <- predict(fit1, newdata = data_test1 )
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = data_test1 )
pred1 <- predict(fit1, newdata = df_test1 )
write_csv(df_test1, file="~/Downloads/hw2_binomial_test.csv")
df_test1["pred1"] = pred1
ggplot(data=df_test1,
aes(x=x, y=y)) +
geom_line(aes(colour="y1")) +
geom_line(aes(y=pred, colour="y_hat1"), linetype = "dashed")  + theme_bw()
df_test1$x
df_test1$proba1
df_test1$pred1
df_test1
ggplot(data=df_test1,
aes(x=x, y=y)) +
geom_line(aes(colour="y1")) +
geom_line(aes(y=pred1, colour="y_hat1"), linetype = "dashed")  + theme_bw()
ggplot(data=df_test1,
aes(x=x, y=y)) +
geom_line(aes(colour="y1")) +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
ggplot(data=df_test1,
aes(x=x, y=y)) +
#geom_line(aes(colour="y1")) +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
ggplot(data=df_test1,
aes(x=x, y=y)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
ggplot(data=df_test1,
aes(x=x, y=proba1)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
help("rbinom")
sampled = sapply(X, function(xx){rbinom(n = 1, size=1, p=proba_bin(xx)[1])})
sampled
df_observed = data.frame(x=X,
y=sampled)
X
######## Introducing the model we want to solve for
N = 1e4
X  = runif(N, -1,1)
proba_bin <- function(x){
transform = c( exp(x/0.9*sin(x*8) /4 +x/4 ), 1)
return(transform/sum(transform))
}
y = sapply(X, proba_bin)
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1"), size=2) +
theme_bw()
sampled = sapply(X, function(xx){rbinom(n = 1, size=1, p=proba_bin(xx)[1])})
df_observed = data.frame(x=X,
y=sampled)
ggplot(data=df_observed, aes(x=x, y=y)) +
geom_point(alpha=0.2) +
geom_jitter()+
theme_bw()
u = lcvplot(y ~ x,deg=2, data=df_observed, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = df_test1 )
df_test1["pred1"] = pred1
ggplot(data=df_test1,
aes(x=x, y=proba1)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
u = lcvplot(y ~ x,deg=1, data=df_observed, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = df_test1 )
df_test1["pred1"] = pred1
ggplot(data=df_test1,
aes(x=x, y=proba1)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
u = lcvplot(y ~ x,deg=4, data=df_observed, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = df_test1 )
df_test1["pred1"] = pred1
ggplot(data=df_test1,
aes(x=x, y=proba1)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
######## Introducing the model we want to solve for
N = 1e6
X  = runif(N, -1,1)
proba_bin <- function(x){
transform = c( exp(x/0.9*sin(x*8) /4 +x/4 ), 1)
return(transform/sum(transform))
}
y = sapply(X, proba_bin)
ggplot(data=data.frame(x=X, y1=y[1,],  y2=y[2,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1"), size=2) +
theme_bw()
sampled = sapply(X, function(xx){rbinom(n = 1, size=1, p=proba_bin(xx)[1])})
df_observed = data.frame(x=X,
y=sampled)
u = lcvplot(y ~ x,deg=2, data=df_observed, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
h1
u$df
u$values
u$cri
u$alpha
u = lcvplot(y ~ x,deg=2, data=df_observed, family='binomial', alpha = seq(0.01, 0.1, by=0.01))
plot(u)
h1 = u$alpha[which.min(u$values)]
h1
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
fit1 <-  locfit(y ~lp(x,h=h1, deg=2), data=df_observed, family='binomial')
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
pred1 <- predict(fit1, newdata = df_test1 )
df_test1["pred1"] = pred1
ggplot(data=df_test1,
aes(x=x, y=proba1)) +
geom_line() +
geom_line(aes(y=pred1), linetype = "dashed")  + theme_bw()
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["proba1"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
write_csv(df_test1, file="~/Downloads/hw2_binomial_test.csv")
df_test1  = data.frame("x"=seq(-1,1,0.01))
df_test1["GT"] =sapply(df_test1$x, FUN=function(xx){proba_bin(xx)[1]})
write_csv(df_test1, file="~/Downloads/hw2_binomial_test.csv")
colnames(df_observed)
write_csv(df_observed, file="~/Downloads/hw2_binomial.csv")
N = 1e4
X  = runif(N, -3,3)
proba <- function(x){
transform = c( exp(-1 +   sin(2 + x*4)), exp(-1 +  cos(abs(x))), 1)
return(transform/sum(transform))
}
x_0 = seq(-3,3, by=0.01)
y = sapply(x_0, proba)
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) + theme_bw() +
geom_line(aes( y=y3, colour="y3"))
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,]), aes(x=x, y=y1/y3)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2/y3, colour="y2")) + theme_bw()
Y= sapply(X, FUN=function(x){rmultinom(1, 1, proba(x))})
df  = data.frame(x = X,
y1= Y[1,],
y2= Y[2,],
y3= Y[3,])
write_csv(df, file="~/Downloads/hw2_multiclass.csv")
df_test  = data.frame("x"=seq(-3,3,0.01))
df_test["proba1"] =sapply(df_test$x, FUN=function(xx){proba(xx)[1]})
df_test["proba2"] =sapply(df_test$x, FUN=function(xx){proba(xx)[2]})
df_test["proba3"] =sapply(df_test$x, FUN=function(xx){proba(xx)[3]})
write_csv(df_test, file="~/Downloads/hw2_multiclass_test.csv")
u = lcvplot(y1 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(u)
h1 = u$alpha[which.min(u$values)]
fit1 <-  locfit(y1 ~lp(x,h=h1, deg=2), data=df, family='binomial')
v =  lcvplot(y2 ~ x,deg=2, data=df, family='binomial', alpha = seq(0.1, 1, by=0.05))
plot(v)
h2 = v$alpha[which.min(v$values)]
fit2 <-  locfit(y2 ~lp(x, h=h2, deg=2), data=df,family='binomial')
pred1 <- predict(fit1, newdata = data.frame(x=x_0) )
pred2 <- predict(fit2, newdata = data.frame(x=x_0) )
pred3 <- 1-(pred1 + pred2)
ggplot(data=data.frame(x=x_0, y1=y[1,],  y2=y[2,], y3=y[3,],
y1_hat = pred1,
y2_hat = pred2,
y3_hat = pred3
), aes(x=x, y=y1)) +
geom_line(aes(colour="y1")) +
geom_line(aes( y=y2, colour="y2")) +
geom_line(aes( y=y3, colour="y3"))+
geom_line(aes(y=y1_hat, colour="y1"), linetype = "dashed") +
geom_line(aes( y=y2_hat, colour="y2"), linetype = "dashed") +
geom_line(aes( y=y3_hat, colour="y3"), linetype = "dashed") + theme_bw()
